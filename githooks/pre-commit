#!/bin/bash
#
# The "pre-commit" hook is run just before "commit" starts doing its job, and can prevent the
# command from running by exiting with non-zero status.
#
# Details:
# Perform to verify the codebase is about to be committed.
#
# Arguments:
#   None
#
# Returns:
#   Exitcode

# -x: print a trace (debug)
# -u: treat unset variables
# -o pipefail: return value of a pipeline
set -uo pipefail

# Include libraries

. ./scripts/utils/log.sh
. ./scripts/utils/fs.sh
. ./scripts/utils/git.sh
. ./scripts/utils/hook.sh

# Constant variables

LOG_FILE="$(git_root_dir)/logs/githooks/pre-commit.log"
readonly LOG_FILE

# Internal functions

run_pre_commit() {
  local -i retval=0

  fs_create_file "${LOG_FILE}"

  hook_composition_analysis "make run-security-scan" &>"${LOG_FILE}"
  ((retval = $?))
  if ((retval != 0)); then
    log_message "githooks" "pre-push" "${retval}"

    return "${retval}"
  fi

  hook_code_analysis "make run-linter-staged" &>"${LOG_FILE}"
  ((retval = $?))
  if ((retval != 0)); then
    log_message "githooks" "pre-push" "${retval}"

    return "${retval}"
  fi

  fs_remove_file "${LOG_FILE}"

  return "${retval}"
}

# Control flow logic

run_pre_commit
exit "${?}"
