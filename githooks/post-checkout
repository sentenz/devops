#!/bin/bash
#
# The "post-checkout" hook runs after a successful "git checkout".
#
# Details:
# Enforce the creation of support branches from the base branches.
#
# Arguments:
#   $1 - ref of the previous HEAD
#   $2 - ref of the new HEAD
#   $3 - flag indicator, (changing branches, flag=1) or (retrieving a file from the index, flag=0)
#
# Returns:
#   Exitcode

# -x: print a trace (debug)
# -u: treat unset variables
# -o pipefail: return value of a pipeline
set -uo pipefail

# Include libraries

. ./scripts/utils/log.sh
. ./scripts/utils/fs.sh
. ./scripts/utils/git.sh
. ./scripts/utils/hook.sh

# Constant variables

PREVIOUS_HEAD="${1}"
readonly PREVIOUS_HEAD
NEW_HEAD="${2}"
readonly NEW_HEAD
FLAG_CHECKOUT="${3}"
readonly FLAG_CHECKOUT

LOG_FILE="$(git_root_dir)/logs/githooks/post-checkout.log"
readonly LOG_FILE
LOCAL_BRANCH="$(git_local_branch)"
readonly LOCAL_BRANCH
readonly -a BASE_BRANCHES=(
  main
)

# Internal functions

run_post_checkout() {
  local -i retval=0

  fs_create_file "${LOG_FILE}"

  hook_verify_branch_context "${LOCAL_BRANCH}" "${FLAG_CHECKOUT}" "${BASE_BRANCHES[@]}" &>"${LOG_FILE}"
  ((retval = $?))
  if ((retval != 0)); then
    log_message "githooks" "pre-push" "${retval}"

    return "${retval}"
  fi

  fs_remove_file "${LOG_FILE}"

  return "${retval}"
}

# Control flow logic

run_post_checkout
exit "${?}"
